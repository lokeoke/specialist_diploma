<?php

/**
 * @file
 * Main file of image_duplicate.
 */
include_once 'inc/phash.inc';
include_once 'inc/surf/surf.inc';
include_once 'inc/surf/fast_hessian.inc';
include_once 'inc/surf/integral_image.inc';
include_once 'inc/surf/response_layer.inc';
include_once 'inc/surf/gaussian_constants.inc';
include_once 'inc/surf/surf_interest_point.inc';
include_once 'inc/kmeans/kmeans.inc';

/**
 * Implements hook_block_info().
 */
function image_duplicate_block_info() {
  $blocks = array();
  $blocks['image_duplicate_search'] = array(
    'info' => t('Image duplicate Search'),
  );
  return $blocks;
}

function image_duplicate_file_insert($file) {
  $image = image_load($file->uri);
  if($image) {
    dpm($image);
    $type = substr($image->info['mime_type'], strpos($image->info['mime_type'], "/") + 1);
    $url = file_create_url($file->uri);
    $image_gd = call_user_func('imagecreatefrom' . $type, $url);

    $board = new Surf($image);
    $points = $board->getFreeOrientedInterestPoints();

    $kmeans = new KMeans();
    $kmeans->setData($points)
      ->setXKey('x')
      ->setYKey('y')
      ->setClusterCount(20)
      ->solve();

    $clusters = $kmeans->getClusters();
    $phash = array();

    $phash[] = array(
      'fid' => $file->fid,
      'full' => 1,
      'phash' => phash_dct_imagehash($image->resource, $image->info['extension'], $image->info['width'], $image->info['height'])
    );

    foreach ($clusters as $cluster) {
      $data = $cluster->getData();
      if (!empty($data)) {
        $bounds = $cluster->getBounds();
        $width = $bounds['maxX'] - $bounds['minX'];
        $height = $bounds['maxY'] - $bounds['minY'];

        imagerectangle($image_gd, $bounds['minX'], $bounds['minY'], $bounds['maxX'], $bounds['maxY'], 0);

        $image_part = imagecreate ($width , $height);
        imagecopy ($image_part, $image->resource, 0, 0, $bounds['minX'], $bounds['minY'], $width, $height);

        $phash[] = array(
          'fid' => $file->fid,
          'full' => 0,
          'phash' => phash_dct_imagehash($image_part, $image->info['extension'], $image->info['width'], $image->info['height'])
        );

//      imagejpeg($image_part, 'test_part.jpg');
        call_user_func_array('image' . $type, array($image_part,'test_part.' . $image->info['extension']));
      }
    }

    //  imagejpeg($image_gd, 'test.jpg');
    call_user_func_array('image' . $type, array($image_gd,'test.' . $image->info['extension']));

    $query = db_insert('image_duplicate')->fields(array('fid', 'full', 'phash'));
    foreach ($phash as $record) {
      $query->values($record);
    }
    $query->execute();

    foreach ($points as $point) {
      imageellipse ($image_gd, $point['x'], $point['y'], 5, 5, 0);
    }
  }
}

/**
 * Implements hook_block_view().
 */
function image_duplicate_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'image_duplicate_search':
      $block['subject'] = '';
      $block['content'] = drupal_get_form('image_duplicate_serach_form');
      break;
  }
  return $block;
}

function image_duplicate_serach_form(){
  $form = array();
  $form['image'] = array(
    '#title' => t('Image'),
    '#type' => 'managed_file',
    '#upload_location' => 'public://',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
  );
  return $form;
}

function image_duplicate_serach_form_submit($form, &$form_state){
  if (isset($form_state['values']['image'])) {
//    $file = file_load($form_state['values']['image']);
//
//    $file->status = FILE_STATUS_PERMANENT;
//
//    file_save($file);
  }
}

/*function image_duplicate_node_view($node, $view_mode, $langcode) {
  $file = file_load(1);
  $image = image_load($file->uri);
  $type = substr($image->info['mime_type'], strpos($image->info['mime_type'], "/") + 1);
  $url = file_create_url($file->uri);
  $image_gd = call_user_func('imagecreatefrom' . $type, $url);


//  $image = image_load('public://field/image/small_ship_copy.jpg');

//  dpm(surf_integral_image($image));

  $points = cache_get('surf_points');
  if (!$points) {
    $board = new Surf($image);
    $points = $board->getFreeOrientedInterestPoints();
    cache_set('surf_points', $points);
  }
  else {
    $points = $points->data;
  }


  foreach ($points as $point) {
    imageellipse ($image_gd, $point['x'], $point['y'], 5, 5, 0);
  }

  $kmeans = new KMeans();
  $kmeans->setData($points)
    ->setXKey('x')
    ->setYKey('y')
    ->setClusterCount(20)
    ->solve();

  $clusters = $kmeans->getClusters();
  $phash = array();

  $phash[] = array(
    'fid' => $file->fid,
    'full' => 1,
    'phash' => phash_dct_imagehash($image->resource, $image->info['extension'], $image->info['width'], $image->info['height'])
  );

  foreach ($clusters as $cluster) {
    $data = $cluster->getData();
    if (!empty($data)) {
      $bounds = $cluster->getBounds();
      $width = $bounds['maxX'] - $bounds['minX'];
      $height = $bounds['maxY'] - $bounds['minY'];
      imagerectangle($image_gd, $bounds['minX'], $bounds['minY'], $bounds['maxX'], $bounds['maxY'], 0);
      $image_part = imagecreate ($width , $height);
      imagecopy ($image_part, $image->resource, 0, 0, $bounds['minX'], $bounds['minY'], $width, $height);

      $phash[] = array(
        'fid' => $file->fid,
        'full' => 0,
        'phash' => phash_dct_imagehash($image_part, $image->info['extension'], $image->info['width'], $image->info['height'])
      );

//      imagejpeg($image_part, 'test_part.jpg');
      call_user_func_array('image' . $type, array($image_part,'test_part.' . $image->info['extension']));
    }
  }

//  imagejpeg($image_gd, 'test.jpg');
  call_user_func_array('image' . $type, array($image_gd,'test.' . $image->info['extension']));




  $query = db_insert('image_duplicate')->fields(array('fid', 'full', 'phash'));
  foreach ($phash as $record) {
    $query->values($record);
  }
  $query->execute();


}*/